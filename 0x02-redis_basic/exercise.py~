#!/usr/bin/env python3
"""Create a Cache class. In the __init__ method, store an instance of the
Redis client as a private variable named _redis (using redis.Redis()) and
flush the instance using flushdb. Create a store method that takes a data
argument and returns a string. The method should generate a random key
(e.g. using uuid), store the input data in Redis using the random key and
return the key. Type-annotate store correctly. Remember that data can be a
str, bytes, int or float"""
import redis
import uuid
from functools import wraps
from typing import Union, Callable


def call_history(method: Callable) -> Callable:
    key = method.__qualname__

    @wraps(method)
    def wrapper(self, data: Union[str, bytes, int, float]) -> str:
        inputs_key = f"{key}:inputs"
        outputs_key = f"{key}:outputs"

        input_args = str(data)
        self._redis.rpush(inputs_key, input_args)

        output = method(self, data) 
        self._redis.rpush(outputs_key, str(output))

        return output

    return wrapper


class Cache:
    def __init__(self):
        self._redis = redis.Redis()
        self._redis.flushdb()

    @call_history
    def store(self, data: Union[str, bytes, int, float]) -> str:
        key = str(uuid.uuid4())
        self._redis.set(key, data)
        return key

    def get(self, key: str, fn: Callable = None) ->
            Union[str, bytes, int, float]:
        data = self._redis.get(key)
        if data is None:
            return None
        if fn is not None:
            data = fn(data)
        return data

    def get_str(self, key: str) -> str:
        return self.get(key, str)

    def get_int(self, key: str) -> int:
        return self.get(key, int)
